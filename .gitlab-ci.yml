#-----------------------------------
# variables:
# Set the variable through the GitLab UI, or set it here by
# uncommenting the following two lines and replacing the Agent's path with your own:
# variables:
#   CI_REGISTRY_PROXY: 192.168.2.29:8443/proxy_cache/
#   CA_CERTIFICATE:  【192.168.2.29的SSL证书】
#   CI_REGISTRY: 192.168.2.29:8443
#   CI_REGISTRY_USER: robot$$ruoyi-cloud+gitlab 【注意需要两个$,前一个$为转义字符】【harbor roboot的Name,需要先在harbor创建仓库后，再创建robot账号】
#   CI_REGISTRY_PASSWORD:【harbor roboot的Secret】
#   SONAR_HOST_URL:  http://192.168.2.28:9000/
#   SONAR_TOKEN:【填入个人账号的token】
#   NEXUS_REPO_USERNAME: 私有仓库账号
#   NEXUS_REPO_PASSWORD: 私有仓库密码
#   NEXUS_REPO_MAVEN_PUBLIC: http://192.168.2.28:8081/repository/maven-public/
#   NEXUS_REPO_RELEASES_URL: http://192.168.2.28:8081/repository/maven-releases/
#   NEXUS_REPO_SNAPSHOTS_URL: http://192.168.2.28:8081/repository/maven-snapshots/
#   CVE_URL_MODIFIED: http://192.168.2.28:8081/repository/raw-cve/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz
#   CVE_URL_BASE: http://192.168.2.28:8081/repository/raw-cve/feeds/json/cve/1.1/nvdcve-1.1-%d.json.gz


include:
  - .gitlab/jobs/build.yml
  - .gitlab/jobs/upload.yml

variables:
  LOCAL_M2_REPOS: .m2/repository
  MAVEN_OPTS: "-Dmaven.repo.local=${LOCAL_M2_REPOS}"
  SONAR_CACHE: .sonar/cache
  #管理项目k8s yaml的项目编号
  MANIFEST_PROJECT_ID: 0
  #版本,docker image,jar
  VERSION: $CI_COMMIT_SHORT_SHA
  MAVEN_CMD_VERSION: -Dsha1=-$VERSION
  PROJECT_NAME: ruoyi-cloud
  #BE
  SONAR_BE_PROJECT_KEY: ruoyi-be
  #FE
  SONAR_FE_PROJECT_KEY: ruoyi-fe
  PROJECT_FE_DIR: ruoyi-ui
  PROJECT_FE_DIR_SRC: ruoyi-ui/src
  PROJECT_FE_DIR_DIST: ${PROJECT_FE_DIR}/dist
  PROJECT_FE_DIR_NODE_MODULES: ${PROJECT_FE_DIR}/node_modules

workflow:
  rules:
    - if: '$CI_COMMIT_TAG'
      variables:
          VERSION: $CI_COMMIT_TAG
          MAVEN_CMD_VERSION: -Drevision=$VERSION -Dchangelist=
    - when: always

stages:
  # - .pre
  #编译
  - build
  #测试
  - test
  #扫描
  - scan
  #打包
  - package
  #上传镜像
  - upload
  - predeploy
  - deploy
  # - .post

build-be:
  stage: build
  tags:
    # - build-tag
    - cluster
  image: ${CI_REGISTRY_PROXY}library/maven:3.8.5-openjdk-11-slim
  # 执行脚本
  script:
    - echo "compile start"
    - mvn -s settings.xml $MAVEN_CMD_VERSION clean compile
    - pwd && ls -a
    - echo "compile end"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - ${LOCAL_M2_REPOS}

build-fe:
  stage: build
  tags:
    # - build-tag
    - cluster
  image: ${CI_REGISTRY_PROXY}library/node:12.22.12-bullseye-slim
  # 执行脚本
  script:
    - echo "compile start"
    - cd ${PROJECT_FE_DIR}
    - pwd && ls -a
    - yarn
    - pwd && ls -a
    - echo "compile end"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - ${PROJECT_FE_DIR_NODE_MODULES}

sonarqube-check-java:
  image: ${CI_REGISTRY_PROXY}library/maven:3.8.5-openjdk-11-slim
  tags:
    # - main
    - cluster
  stage: scan
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - ${SONAR_CACHE}
  script:
    - mvn -s settings.xml $MAVEN_CMD_VERSION package dependency-check:aggregate -Dsonar.projectName=${SONAR_BE_PROJECT_KEY} -Dsonar.projectKey=${SONAR_BE_PROJECT_KEY}
    - mvn -s settings.xml $MAVEN_CMD_VERSION verify sonar:sonar -Dsonar.qualitygate.wait=true -Dsonar.projectName=${SONAR_BE_PROJECT_KEY} -Dsonar.projectKey=${SONAR_BE_PROJECT_KEY}
  allow_failure: true
  needs:
    - job: "build-be"

sonarqube-check-js:
  tags:
    # - main
    - cluster
  stage: scan
  image:
    name: ${CI_REGISTRY_PROXY}sonarsource/sonar-scanner-cli:4.7.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectName=${SONAR_FE_PROJECT_KEY} -Dsonar.projectKey=${SONAR_FE_PROJECT_KEY} -Dsonar.sources=${PROJECT_FE_DIR_SRC}
  allow_failure: true
  needs:
    - job: "build-fe"

java-package:
  variables:
  image: ${CI_REGISTRY_PROXY}library/maven:3.8.5-openjdk-11-slim
  # 执行阶段
  stage: package
  # 执行runner
  tags:
    - cluster
  # 执行脚本
  script:
    - echo "package start"
    - mvn -s settings.xml $MAVEN_CMD_VERSION package -Dmaven.test.skip=true
    - pwd && ls -a
    - echo "package start end"
  artifacts:
    # 生成的产物2小时后自动销毁
    expire_in: 2 h
    # 缓存作业产物
    paths:
      - "**/target/*.jar"
  needs:
    - job: "sonarqube-check-java"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - ${LOCAL_M2_REPOS}

npm-package:
  variables:
  image: ${CI_REGISTRY_PROXY}library/node:12.22.12-bullseye-slim
  # 执行阶段
  stage: package
  # 执行runner
  tags:
    - cluster
  # 执行脚本
  script:
    - echo "package start"
    - cd ${PROJECT_FE_DIR}
    - pwd && ls -a
    - yarn
    - yarn build:prod
    - pwd && ls -a
    - echo "package start end"
  artifacts:
    # 生成的产物2小时后自动销毁
    expire_in: 2 h
    # 缓存作业产物
    paths:
      - ${PROJECT_FE_DIR_DIST}
  needs:
    - job: "sonarqube-check-js"

image-upload-db:
  extends: .image-upload-service
  variables:
    CONTEXT_NAME: "docker/mysql"
    IMAGE_NAME: "$PROJECT_NAME/mysql"
  before_script:
    - mv sql/* docker/mysql/db

#image-upload-sentinel:
#  extends: .image-upload
#  needs:
#  - job: "java-package"
#    artifacts: true
#  script:
#    - /kaniko/executor --cache=true --context script/kuboard/sentinel --dockerfile script/kuboard/sentinel/Dockerfile --destination $CI_REGISTRY/$PROJECT_NAME/sentinel:$VERSION

image-upload-gateway:
  extends: .image-upload-service
  variables:
    CONTEXT_NAME: "docker/ruoyi/gateway"
    IMAGE_NAME: "$PROJECT_NAME/gateway"
  before_script:
    - mv ruoyi-gateway/target/ruoyi-gateway.jar docker/ruoyi/gateway/jar/

image-upload-auth:
  extends: .image-upload-service
  variables:
    CONTEXT_NAME: "docker/ruoyi/auth"
    IMAGE_NAME: "$PROJECT_NAME/docker/ruoyi/auth"
  before_script:
    - mv ruoyi-auth/target/ruoyi-auth.jar docker/ruoyi/auth/jar/

image-upload-file:
  extends: .image-upload-service
  variables:
    CONTEXT_NAME: "docker/ruoyi/modules/file"
    IMAGE_NAME: "$PROJECT_NAME/file"
  before_script:
    - mv ruoyi-modules/ruoyi-file/target/ruoyi-modules-file.jar docker/ruoyi/modules/file/jar/

image-upload-gen:
  extends: .image-upload-service
  variables:
    CONTEXT_NAME: "docker/ruoyi/modules/gen"
    IMAGE_NAME: "$PROJECT_NAME/gen"
  before_script:
    - mv ruoyi-modules/ruoyi-gen/target/ruoyi-modules-gen.jar docker/ruoyi/modules/gen/jar/

image-upload-job:
  extends: .image-upload-service
  variables:
    CONTEXT_NAME: "docker/ruoyi/modules/job"
    IMAGE_NAME: "$PROJECT_NAME/job"
  before_script:
    - mv ruoyi-modules/ruoyi-job/target/ruoyi-modules-job.jar docker/ruoyi/modules/job/jar/

image-upload-system:
  extends: .image-upload-service
  variables:
    CONTEXT_NAME: "docker/ruoyi/modules/system"
    IMAGE_NAME: "$PROJECT_NAME/system"
  before_script:
    - mv ruoyi-modules/ruoyi-system/target/ruoyi-modules-system.jar docker/ruoyi/modules/system/jar/

image-upload-monitor:
  extends: .image-upload-service
  variables:
    CONTEXT_NAME: "docker/ruoyi/visual/monitor"
    IMAGE_NAME: "$PROJECT_NAME/monitor"
  before_script:
    - mv ruoyi-visual/ruoyi-monitor/target/ruoyi-visual-monitor.jar docker/ruoyi/visual/monitor/jar/

image-upload-ui-admin:
  extends: .image-upload-service
  variables:
    CONTEXT_NAME: "docker/nginx"
    IMAGE_NAME: "$PROJECT_NAME/ui-admin"
  needs:
  - job: "npm-package"
    artifacts: true
  before_script:
    - mv ruoyi-ui/dist/* docker/nginx/html/dist

jar-upload:
  extends: .jar-upload
  needs:
  - job: "java-package"
    artifacts: true
  script:
    - mvn -s settings.xml $MAVEN_CMD_VERSION --batch-mode deploy
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - when: never

#predeploy:
#  image: ${CI_REGISTRY_PROXY}curlimages/curl:7.83.1
#  stage: predeploy
#  script:
#    - echo -n "IMAGE_REF=" >> deploy.env
#    - echo -n "$CI_REGISTRY/$PROJECT_NAME/saber-db:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/nacos-db:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/sentinel:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/blade-gateway:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/blade-auth:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/blade-ops/blade-admin:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/blade-ops/blade-develop:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/blade-ops/blade-report:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/blade-ops/blade-resource:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/blade-ops/blade-swagger:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/blade-service/blade-desk:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/blade-service/blade-log:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/blade-service/blade-system:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/blade-service/blade-user:$VERSION" >> deploy.env
#    - echo -n ",$CI_REGISTRY/$PROJECT_NAME/ui/admin:$VERSION" >> deploy.env
#  after_script:
#    - cat deploy.env
#  artifacts:
#    reports:
#      dotenv: deploy.env
#  rules:
#  - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH =~ /^release/ || $CI_COMMIT_TAG'
#    when: on_success
#  - when: never
#
#deploy:dev:
#  image: ${CI_REGISTRY_PROXY}curlimages/curl:7.83.1
#  stage: deploy
#  needs:
#    - job: predeploy
#      artifacts: true
#  variables:
#    TARGET_ENVIRONMENT: dev
#  script:
#  - printenv
#  - 'curl -v -k --fail --request POST --form token=${CI_JOB_TOKEN} --form ref=main --form "variables[IMAGE_REF]=${IMAGE_REF}" --form "variables[TARGET_ENVIRONMENT]=${TARGET_ENVIRONMENT}" "${CI_API_V4_URL}/projects/${MANIFEST_PROJECT_ID}/trigger/pipeline"'
#  environment:
#    name: $TARGET_ENVIRONMENT
#  rules:
#  - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH =~ /^release/ || $CI_COMMIT_TAG'
#    when: on_success
#  - when: never
#
#deploy:test:
#  image: ${CI_REGISTRY_PROXY}curlimages/curl:7.83.1
#  stage: deploy
#  needs:
#    - job: predeploy
#      artifacts: true
#  variables:
#    TARGET_ENVIRONMENT: test
#  script:
#  - 'curl -v -k --fail --request POST --form token=${CI_JOB_TOKEN} --form ref=main --form "variables[IMAGE_REF]=${IMAGE_REF}" --form "variables[TARGET_ENVIRONMENT]=${TARGET_ENVIRONMENT}" "${CI_API_V4_URL}/projects/${MANIFEST_PROJECT_ID}/trigger/pipeline"'
#  environment:
#    name: $TARGET_ENVIRONMENT
#  rules:
#    - if: '$CI_COMMIT_TAG'
#      when: manual
